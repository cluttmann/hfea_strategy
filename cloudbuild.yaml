steps:
  #Step 1: Deploy the monthly_buy_hfeaFunction
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
    - functions
    - deploy
    - monthly_buy_hfea  # The name of the Cloud Function for monthly buys
    - --source=.
    - --trigger-http
    - --region=europe-west3
    - --runtime=python310
    - --timeout=540s
    - --entry-point=monthly_buy_hfea  # Entry point function in your Python code
    - --memory=512MB
    - --set-env-vars=GOOGLE_CLOUD_PROJECT=1098661711782,GOOGLE_CLOUD_PROJECT_ID=trading-436516
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  #Step 2: Deploy the rebalance_hfeaFunction
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
    - functions
    - deploy
    - rebalance_hfea  # The name of the Cloud Function for rebalancing
    - --source=.
    - --trigger-http
    - --region=europe-west3
    - --runtime=python310
    - --timeout=540s
    - --entry-point=rebalance_hfea  # Entry point function in your Python code
    - --memory=512MB
    - --set-env-vars=GOOGLE_CLOUD_PROJECT=1098661711782,GOOGLE_CLOUD_PROJECT_ID=trading-436516
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # Step 3: Deploy the monthly_buy_spxl
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
    - functions
    - deploy
    - monthly_buy_spxl  # The name of the Cloud Function for rebalancing
    - --source=.
    - --trigger-http
    - --region=europe-west3
    - --runtime=python310
    - --timeout=540s
    - --entry-point=monthly_buy_spxl  # Entry point function in your Python code
    - --memory=512MB
    - --set-env-vars=GOOGLE_CLOUD_PROJECT=1098661711782,GOOGLE_CLOUD_PROJECT_ID=trading-436516
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # Step 4: Deploy the monthly_nine_sig_contributions
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
    - functions
    - deploy
    - monthly_nine_sig_contributions  # The name of the Cloud Function for 9-sig monthly contributions
    - --source=.
    - --trigger-http
    - --region=europe-west3
    - --runtime=python310
    - --timeout=540s
    - --entry-point=monthly_nine_sig_contributions  # Entry point function in your Python code
    - --memory=512MB
    - --set-env-vars=GOOGLE_CLOUD_PROJECT=1098661711782,GOOGLE_CLOUD_PROJECT_ID=trading-436516
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # Step 5: Deploy the quarterly_nine_sig_signal
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
    - functions
    - deploy
    - quarterly_nine_sig_signal  # The name of the Cloud Function for 9-sig quarterly signals
    - --source=.
    - --trigger-http
    - --region=europe-west3
    - --runtime=python310
    - --timeout=540s
    - --entry-point=quarterly_nine_sig_signal  # Entry point function in your Python code
    - --memory=512MB
    - --set-env-vars=GOOGLE_CLOUD_PROJECT=1098661711782,GOOGLE_CLOUD_PROJECT_ID=trading-436516
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # # Deploy the monthly_buy_efo
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   args:
  #   - functions
  #   - deploy
  #   - monthly_buy_efo  # The name of the Cloud Function
  #   - --source=.
  #   - --trigger-http
  #   - --region=europe-west3
  #   - --runtime=python310
  #   - --timeout=540s
  #   - --entry-point=monthly_buy_efo  # Entry point function in your Python code
  #   - --memory=512MB
  #   - --set-env-vars=GOOGLE_CLOUD_PROJECT=1098661711782,GOOGLE_CLOUD_PROJECT_ID=trading-436516
  #   waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # Step 4: Deploy the daily_trade_spxl_200sma
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
    - functions
    - deploy
    - daily_trade_spxl_200sma  # The name of the Cloud Function for rebalancing
    - --source=.
    - --trigger-http
    - --region=europe-west3
    - --runtime=python310
    - --timeout=540s
    - --entry-point=daily_trade_spxl_200sma  # Entry point function in your Python code
    - --memory=512MB
    - --set-env-vars=GOOGLE_CLOUD_PROJECT=1098661711782,GOOGLE_CLOUD_PROJECT_ID=trading-436516
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # # Step 4: Deploy the daily_trade_efo_200sma
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   args:
  #   - functions
  #   - deploy
  #   - daily_trade_efo_200sma  # The name of the Cloud Function for rebalancing
  #   - --source=.
  #   - --trigger-http
  #   - --region=europe-west3
  #   - --runtime=python310
  #   - --timeout=540s
  #   - --entry-point=daily_trade_efo_200sma  # Entry point function in your Python code
  #   - --memory=512MB
  #   - --set-env-vars=GOOGLE_CLOUD_PROJECT=1098661711782,GOOGLE_CLOUD_PROJECT_ID=trading-436516
  #   waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # Step 6: Deploy the unified index_alert Cloud Function with Alpaca and Telegram settings
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
    - functions
    - deploy
    - index_alert  # Single Cloud Function for all indices
    - --source=.
    - --trigger-http
    - --region=europe-west3
    - --runtime=python310
    - --timeout=540s
    - --entry-point=index_alert  # Python function entry point
    - --memory=512MB
    - --set-env-vars=GOOGLE_CLOUD_PROJECT=1098661711782,GOOGLE_CLOUD_PROJECT_ID=trading-436516
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

# Create Cloud Scheduler job for 'monthly_buy_hfea' function
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'scheduler', 'jobs', 'update', 'http', 'monthly_buy_hfea',
      '--schedule', '0 12 1-7 * *',  
      '--uri', 'https://europe-west3-trading-436516.cloudfunctions.net/monthly_buy_hfea',
      '--http-method', 'POST',
      '--time-zone', 'America/New_York',
      '--location', 'europe-west3',
      '--oidc-service-account-email', '1098661711782-compute@developer.gserviceaccount.com'
    ]
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # Create Cloud Scheduler job for 'rebalance_hfea' function
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'scheduler', 'jobs', 'update', 'http', 'rebalance_hfea',
      '--schedule', '0 14 1-7 1,4,7,10 *',  
      '--uri', 'https://europe-west3-trading-436516.cloudfunctions.net/rebalance_hfea',
      '--http-method', 'POST',
      '--time-zone', 'America/New_York',
      '--location', 'europe-west3',
      '--oidc-service-account-email', '1098661711782-compute@developer.gserviceaccount.com'
    ]
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # Create Cloud Scheduler job for 'monthly_buy_spxl' function
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'scheduler', 'jobs', 'update', 'http', 'monthly_buy_spxl',
      '--schedule', '0 12 1-7 * *',  
      '--uri', 'https://europe-west3-trading-436516.cloudfunctions.net/monthly_buy_spxl',
      '--http-method', 'POST',
      '--time-zone', 'America/New_York',
      '--location', 'europe-west3',
      '--oidc-service-account-email', '1098661711782-compute@developer.gserviceaccount.com'
    ]
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # Create Cloud Scheduler job for 'monthly_nine_sig_contributions' function
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'scheduler', 'jobs', 'update', 'http', 'monthly_nine_sig_contributions',
      '--schedule', '0 12 1-7 * *',  
      '--uri', 'https://europe-west3-trading-436516.cloudfunctions.net/monthly_nine_sig_contributions',
      '--http-method', 'POST',
      '--time-zone', 'America/New_York',
      '--location', 'europe-west3',
      '--oidc-service-account-email', '1098661711782-compute@developer.gserviceaccount.com'
    ]
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # Create Cloud Scheduler job for 'quarterly_nine_sig_signal' function
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'scheduler', 'jobs', 'update', 'http', 'quarterly_nine_sig_signal',
      '--schedule', '0 13 1-7 1,4,7,10 *',  
      '--uri', 'https://europe-west3-trading-436516.cloudfunctions.net/quarterly_nine_sig_signal',
      '--http-method', 'POST',
      '--time-zone', 'America/New_York',
      '--location', 'europe-west3',
      '--oidc-service-account-email', '1098661711782-compute@developer.gserviceaccount.com'
    ]
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # Create Cloud Scheduler job for 'buy_spxl_above_200sma' function
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'scheduler', 'jobs', 'update', 'http', 'daily_trade_spxl_200sma',
      '--schedule', '56 15 * * 1-5',  
      '--uri', 'https://europe-west3-trading-436516.cloudfunctions.net/daily_trade_spxl_200sma',
      '--http-method', 'POST',
      '--time-zone', 'America/New_York',
      '--location', 'europe-west3',
      '--oidc-service-account-email', '1098661711782-compute@developer.gserviceaccount.com'
    ]
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # Cloud Scheduler Job for S&P 500 Index (POST method with request body)
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'scheduler', 'jobs', 'update', 'http', 'sp500_drop_alert',
      '--schedule', '30 9-15 * * 1-5',  # Runs at the 30th minute of every hour from 9 AM to 3 PM (inclusive)
      '--uri', 'https://europe-west3-trading-436516.cloudfunctions.net/index_alert',
      '--http-method', 'POST',
      '--time-zone', 'America/New_York',
      '--location', 'europe-west3',
      '--oidc-service-account-email', '1098661711782-compute@developer.gserviceaccount.com',
      '--message-body', '{"index_symbol": "^SPX", "index_name": "S&P 500"}'
    ]
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

  # Cloud Scheduler Job for MSCI World Index (POST method with request body)
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'scheduler', 'jobs', 'update', 'http', 'msci_drop_alert',
      '--schedule', '30 9-15 * * 1-5',  # Runs at the 30th minute of every hour from 9 AM to 3 PM (inclusive)
      '--uri', 'https://europe-west3-trading-436516.cloudfunctions.net/index_alert',
      '--http-method', 'POST',
      '--time-zone', 'America/New_York',
      '--location', 'europe-west3',
      '--oidc-service-account-email', '1098661711782-compute@developer.gserviceaccount.com',
      '--message-body', '{"index_symbol": "URTH", "index_name": "MSCI World"}'
    ]
    waitFor: ['-'] # start in parallel and actually needs to be set, otherwise deployment is sequential

options:
  logging: CLOUD_LOGGING_ONLY  # Send logs to Cloud Logging only